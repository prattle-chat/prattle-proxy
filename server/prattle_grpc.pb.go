// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: prattle.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyClient interface {
	// Signup accepts a new password and mints a new ID and OTP seed
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	// Finalise is used to finalise the signup flow, which it does by accepting
	// the minted ID and a valid OTP value.
	//
	// This call will return an error or nothing
	Finalise(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Token accepts a password and a valid OTP value, returning a new bearer
	// token which can be used in Subscribing to message stream
	Token(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*TokenValue, error)
	// AddPublicKey adds a new public key for a user. A user can have up to n public
	// keys, where n is configured on the proxy.
	//
	// Where n is too few, a user is limited by the number of clients they can connect
	// with.
	// Where n is too high, the cost of sending a user a message becomes high, as does
	// receiving _for_ that user
	AddPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Subscribe is used to provide a stream to receive a user's messages
	Subscribe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Proxy_SubscribeClient, error)
	// PublicKey retrieves the public keys of a user, handling cases where a key
	// lives on a third-party proxy instance
	PublicKey(ctx context.Context, in *Auth, opts ...grpc.CallOption) (Proxy_PublicKeyClient, error)
	// Send accepts an encoded/ wrapped message and sends it to a user
	Send(ctx context.Context, in *MessageWrapper, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateGroup will create a group, setting the calling user as owner
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	// JoinGroup will join the calling user to a group, so long as that
	// group is set to Open
	JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Group returns information about a group, such as owners and members
	GroupInfo(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	// InviteToGroup allows group owners to invite users to a group
	InviteToGroup(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PromoteUser allows a group owner to make another user an owner
	PromoteUser(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DemoteUser allows a group owner to demote another owner to
	// regular user, or to boot a regular user from the group
	DemoteUser(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LeaveGroup allows a user to leave a group
	LeaveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, "/Proxy/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Finalise(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Proxy/Finalise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Token(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*TokenValue, error) {
	out := new(TokenValue)
	err := c.cc.Invoke(ctx, "/Proxy/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) AddPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Proxy/AddPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) Subscribe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Proxy_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[0], "/Proxy/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Proxy_SubscribeClient interface {
	Recv() (*MessageWrapper, error)
	grpc.ClientStream
}

type proxySubscribeClient struct {
	grpc.ClientStream
}

func (x *proxySubscribeClient) Recv() (*MessageWrapper, error) {
	m := new(MessageWrapper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) PublicKey(ctx context.Context, in *Auth, opts ...grpc.CallOption) (Proxy_PublicKeyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[1], "/Proxy/PublicKey", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyPublicKeyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Proxy_PublicKeyClient interface {
	Recv() (*PublicKeyValue, error)
	grpc.ClientStream
}

type proxyPublicKeyClient struct {
	grpc.ClientStream
}

func (x *proxyPublicKeyClient) Recv() (*PublicKeyValue, error) {
	m := new(PublicKeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) Send(ctx context.Context, in *MessageWrapper, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Proxy/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/Proxy/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Proxy/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GroupInfo(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/Proxy/GroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) InviteToGroup(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Proxy/InviteToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) PromoteUser(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Proxy/PromoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DemoteUser(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Proxy/DemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) LeaveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Proxy/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServer is the server API for Proxy service.
// All implementations must embed UnimplementedProxyServer
// for forward compatibility
type ProxyServer interface {
	// Signup accepts a new password and mints a new ID and OTP seed
	Signup(context.Context, *SignupRequest) (*SignupResponse, error)
	// Finalise is used to finalise the signup flow, which it does by accepting
	// the minted ID and a valid OTP value.
	//
	// This call will return an error or nothing
	Finalise(context.Context, *Auth) (*emptypb.Empty, error)
	// Token accepts a password and a valid OTP value, returning a new bearer
	// token which can be used in Subscribing to message stream
	Token(context.Context, *Auth) (*TokenValue, error)
	// AddPublicKey adds a new public key for a user. A user can have up to n public
	// keys, where n is configured on the proxy.
	//
	// Where n is too few, a user is limited by the number of clients they can connect
	// with.
	// Where n is too high, the cost of sending a user a message becomes high, as does
	// receiving _for_ that user
	AddPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error)
	// Subscribe is used to provide a stream to receive a user's messages
	Subscribe(*emptypb.Empty, Proxy_SubscribeServer) error
	// PublicKey retrieves the public keys of a user, handling cases where a key
	// lives on a third-party proxy instance
	PublicKey(*Auth, Proxy_PublicKeyServer) error
	// Send accepts an encoded/ wrapped message and sends it to a user
	Send(context.Context, *MessageWrapper) (*emptypb.Empty, error)
	// CreateGroup will create a group, setting the calling user as owner
	CreateGroup(context.Context, *Group) (*Group, error)
	// JoinGroup will join the calling user to a group, so long as that
	// group is set to Open
	JoinGroup(context.Context, *Group) (*emptypb.Empty, error)
	// Group returns information about a group, such as owners and members
	GroupInfo(context.Context, *Group) (*Group, error)
	// InviteToGroup allows group owners to invite users to a group
	InviteToGroup(context.Context, *GroupUser) (*emptypb.Empty, error)
	// PromoteUser allows a group owner to make another user an owner
	PromoteUser(context.Context, *GroupUser) (*emptypb.Empty, error)
	// DemoteUser allows a group owner to demote another owner to
	// regular user, or to boot a regular user from the group
	DemoteUser(context.Context, *GroupUser) (*emptypb.Empty, error)
	// LeaveGroup allows a user to leave a group
	LeaveGroup(context.Context, *Group) (*emptypb.Empty, error)
	mustEmbedUnimplementedProxyServer()
}

// UnimplementedProxyServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (UnimplementedProxyServer) Signup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedProxyServer) Finalise(context.Context, *Auth) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalise not implemented")
}
func (UnimplementedProxyServer) Token(context.Context, *Auth) (*TokenValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedProxyServer) AddPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublicKey not implemented")
}
func (UnimplementedProxyServer) Subscribe(*emptypb.Empty, Proxy_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedProxyServer) PublicKey(*Auth, Proxy_PublicKeyServer) error {
	return status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (UnimplementedProxyServer) Send(context.Context, *MessageWrapper) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedProxyServer) CreateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedProxyServer) JoinGroup(context.Context, *Group) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedProxyServer) GroupInfo(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfo not implemented")
}
func (UnimplementedProxyServer) InviteToGroup(context.Context, *GroupUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToGroup not implemented")
}
func (UnimplementedProxyServer) PromoteUser(context.Context, *GroupUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteUser not implemented")
}
func (UnimplementedProxyServer) DemoteUser(context.Context, *GroupUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteUser not implemented")
}
func (UnimplementedProxyServer) LeaveGroup(context.Context, *Group) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedProxyServer) mustEmbedUnimplementedProxyServer() {}

// UnsafeProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServer will
// result in compilation errors.
type UnsafeProxyServer interface {
	mustEmbedUnimplementedProxyServer()
}

func RegisterProxyServer(s grpc.ServiceRegistrar, srv ProxyServer) {
	s.RegisterService(&Proxy_ServiceDesc, srv)
}

func _Proxy_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Finalise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Finalise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/Finalise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Finalise(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Token(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_AddPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).AddPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/AddPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).AddPublicKey(ctx, req.(*PublicKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServer).Subscribe(m, &proxySubscribeServer{stream})
}

type Proxy_SubscribeServer interface {
	Send(*MessageWrapper) error
	grpc.ServerStream
}

type proxySubscribeServer struct {
	grpc.ServerStream
}

func (x *proxySubscribeServer) Send(m *MessageWrapper) error {
	return x.ServerStream.SendMsg(m)
}

func _Proxy_PublicKey_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Auth)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProxyServer).PublicKey(m, &proxyPublicKeyServer{stream})
}

type Proxy_PublicKeyServer interface {
	Send(*PublicKeyValue) error
	grpc.ServerStream
}

type proxyPublicKeyServer struct {
	grpc.ServerStream
}

func (x *proxyPublicKeyServer) Send(m *PublicKeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func _Proxy_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).Send(ctx, req.(*MessageWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).JoinGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/GroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GroupInfo(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_InviteToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).InviteToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/InviteToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).InviteToGroup(ctx, req.(*GroupUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_PromoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).PromoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/PromoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).PromoteUser(ctx, req.(*GroupUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/DemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DemoteUser(ctx, req.(*GroupUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proxy/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).LeaveGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

// Proxy_ServiceDesc is the grpc.ServiceDesc for Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _Proxy_Signup_Handler,
		},
		{
			MethodName: "Finalise",
			Handler:    _Proxy_Finalise_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _Proxy_Token_Handler,
		},
		{
			MethodName: "AddPublicKey",
			Handler:    _Proxy_AddPublicKey_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Proxy_Send_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Proxy_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Proxy_JoinGroup_Handler,
		},
		{
			MethodName: "GroupInfo",
			Handler:    _Proxy_GroupInfo_Handler,
		},
		{
			MethodName: "InviteToGroup",
			Handler:    _Proxy_InviteToGroup_Handler,
		},
		{
			MethodName: "PromoteUser",
			Handler:    _Proxy_PromoteUser_Handler,
		},
		{
			MethodName: "DemoteUser",
			Handler:    _Proxy_DemoteUser_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Proxy_LeaveGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Proxy_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublicKey",
			Handler:       _Proxy_PublicKey_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prattle.proto",
}
