// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: group.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupsClient is the client API for Groups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsClient interface {
	// CreateGroup will create a group, setting the calling user as owner
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	// JoinGroup will join the calling user to a group, so long as that
	// group is set to Open
	JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Group returns information about a group, such as owners and members
	GroupInfo(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	// InviteToGroup allows group owners to invite users to a group
	InviteToGroup(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PromoteUser allows a group owner to make another user an owner
	PromoteUser(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DemoteUser allows a group owner to demote another owner to
	// regular user, or to boot a regular user from the group
	DemoteUser(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LeaveGroup allows a user to leave a group
	LeaveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupsClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsClient(cc grpc.ClientConnInterface) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/group.Groups/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/group.Groups/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GroupInfo(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/group.Groups/GroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) InviteToGroup(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/group.Groups/InviteToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) PromoteUser(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/group.Groups/PromoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) DemoteUser(ctx context.Context, in *GroupUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/group.Groups/DemoteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) LeaveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/group.Groups/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServer is the server API for Groups service.
// All implementations must embed UnimplementedGroupsServer
// for forward compatibility
type GroupsServer interface {
	// CreateGroup will create a group, setting the calling user as owner
	CreateGroup(context.Context, *Group) (*Group, error)
	// JoinGroup will join the calling user to a group, so long as that
	// group is set to Open
	JoinGroup(context.Context, *Group) (*emptypb.Empty, error)
	// Group returns information about a group, such as owners and members
	GroupInfo(context.Context, *Group) (*Group, error)
	// InviteToGroup allows group owners to invite users to a group
	InviteToGroup(context.Context, *GroupUser) (*emptypb.Empty, error)
	// PromoteUser allows a group owner to make another user an owner
	PromoteUser(context.Context, *GroupUser) (*emptypb.Empty, error)
	// DemoteUser allows a group owner to demote another owner to
	// regular user, or to boot a regular user from the group
	DemoteUser(context.Context, *GroupUser) (*emptypb.Empty, error)
	// LeaveGroup allows a user to leave a group
	LeaveGroup(context.Context, *Group) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupsServer()
}

// UnimplementedGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServer struct {
}

func (UnimplementedGroupsServer) CreateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupsServer) JoinGroup(context.Context, *Group) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedGroupsServer) GroupInfo(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfo not implemented")
}
func (UnimplementedGroupsServer) InviteToGroup(context.Context, *GroupUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToGroup not implemented")
}
func (UnimplementedGroupsServer) PromoteUser(context.Context, *GroupUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteUser not implemented")
}
func (UnimplementedGroupsServer) DemoteUser(context.Context, *GroupUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteUser not implemented")
}
func (UnimplementedGroupsServer) LeaveGroup(context.Context, *Group) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedGroupsServer) mustEmbedUnimplementedGroupsServer() {}

// UnsafeGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServer will
// result in compilation errors.
type UnsafeGroupsServer interface {
	mustEmbedUnimplementedGroupsServer()
}

func RegisterGroupsServer(s grpc.ServiceRegistrar, srv GroupsServer) {
	s.RegisterService(&Groups_ServiceDesc, srv)
}

func _Groups_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.Groups/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.Groups/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).JoinGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.Groups/GroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GroupInfo(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_InviteToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).InviteToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.Groups/InviteToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).InviteToGroup(ctx, req.(*GroupUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_PromoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).PromoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.Groups/PromoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).PromoteUser(ctx, req.(*GroupUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_DemoteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).DemoteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.Groups/DemoteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).DemoteUser(ctx, req.(*GroupUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.Groups/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).LeaveGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

// Groups_ServiceDesc is the grpc.ServiceDesc for Groups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Groups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Groups_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Groups_JoinGroup_Handler,
		},
		{
			MethodName: "GroupInfo",
			Handler:    _Groups_GroupInfo_Handler,
		},
		{
			MethodName: "InviteToGroup",
			Handler:    _Groups_InviteToGroup_Handler,
		},
		{
			MethodName: "PromoteUser",
			Handler:    _Groups_PromoteUser_Handler,
		},
		{
			MethodName: "DemoteUser",
			Handler:    _Groups_DemoteUser_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Groups_LeaveGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
