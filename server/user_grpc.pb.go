// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// AddPublicKey adds a new public key for a user. A user can have up to n public
	// keys, where n is configured on the proxy.
	//
	// Where n is too few, a user is limited by the number of clients they can connect
	// with.
	// Where n is too high, the cost of sending a user a message becomes high, as does
	// receiving _for_ that user
	AddPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DelPublicKey removes a Public Key from the calling user
	DelPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Tokens returns a user's current tokens for audit/ removal
	Tokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (User_TokensClient, error)
	// DelToken invalidates a token for a user
	DelToken(ctx context.Context, in *TokenValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PublicKey retrieves the public keys of a user. This is a federated endpoint.
	//
	// A prattle implementation must accept and return valid keys:
	//   1. When both the sender and recipient are on the same host
	//   2. When the sender is on a federated peer and the recipient is on this host
	//   3. When the sender is local and the recipient is peered
	//   4. When both sender and recipient are peered
	//
	// Why case 4? Because when we send a message which on behalf of a group
	// on a peered server, a case exists where our server is not peered directly
	// the host that hosts another member of that same group. Thus, we wont be able
	// to send a message which that user can read.
	//
	// Since we relay messages through the owner server of a group anyway, we must
	// also do the same for keys
	PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (User_PublicKeyClient, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/AddPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/DelPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Tokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (User_TokensClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], "/user.User/Tokens", opts...)
	if err != nil {
		return nil, err
	}
	x := &userTokensClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_TokensClient interface {
	Recv() (*TokenValue, error)
	grpc.ClientStream
}

type userTokensClient struct {
	grpc.ClientStream
}

func (x *userTokensClient) Recv() (*TokenValue, error) {
	m := new(TokenValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) DelToken(ctx context.Context, in *TokenValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/DelToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (User_PublicKeyClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[1], "/user.User/PublicKey", opts...)
	if err != nil {
		return nil, err
	}
	x := &userPublicKeyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_PublicKeyClient interface {
	Recv() (*PublicKeyValue, error)
	grpc.ClientStream
}

type userPublicKeyClient struct {
	grpc.ClientStream
}

func (x *userPublicKeyClient) Recv() (*PublicKeyValue, error) {
	m := new(PublicKeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// AddPublicKey adds a new public key for a user. A user can have up to n public
	// keys, where n is configured on the proxy.
	//
	// Where n is too few, a user is limited by the number of clients they can connect
	// with.
	// Where n is too high, the cost of sending a user a message becomes high, as does
	// receiving _for_ that user
	AddPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error)
	// DelPublicKey removes a Public Key from the calling user
	DelPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error)
	// Tokens returns a user's current tokens for audit/ removal
	Tokens(*emptypb.Empty, User_TokensServer) error
	// DelToken invalidates a token for a user
	DelToken(context.Context, *TokenValue) (*emptypb.Empty, error)
	// PublicKey retrieves the public keys of a user. This is a federated endpoint.
	//
	// A prattle implementation must accept and return valid keys:
	//   1. When both the sender and recipient are on the same host
	//   2. When the sender is on a federated peer and the recipient is on this host
	//   3. When the sender is local and the recipient is peered
	//   4. When both sender and recipient are peered
	//
	// Why case 4? Because when we send a message which on behalf of a group
	// on a peered server, a case exists where our server is not peered directly
	// the host that hosts another member of that same group. Thus, we wont be able
	// to send a message which that user can read.
	//
	// Since we relay messages through the owner server of a group anyway, we must
	// also do the same for keys
	PublicKey(*PublicKeyRequest, User_PublicKeyServer) error
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) AddPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublicKey not implemented")
}
func (UnimplementedUserServer) DelPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPublicKey not implemented")
}
func (UnimplementedUserServer) Tokens(*emptypb.Empty, User_TokensServer) error {
	return status.Errorf(codes.Unimplemented, "method Tokens not implemented")
}
func (UnimplementedUserServer) DelToken(context.Context, *TokenValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelToken not implemented")
}
func (UnimplementedUserServer) PublicKey(*PublicKeyRequest, User_PublicKeyServer) error {
	return status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AddPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddPublicKey(ctx, req.(*PublicKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DelPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelPublicKey(ctx, req.(*PublicKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Tokens_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).Tokens(m, &userTokensServer{stream})
}

type User_TokensServer interface {
	Send(*TokenValue) error
	grpc.ServerStream
}

type userTokensServer struct {
	grpc.ServerStream
}

func (x *userTokensServer) Send(m *TokenValue) error {
	return x.ServerStream.SendMsg(m)
}

func _User_DelToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DelToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelToken(ctx, req.(*TokenValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PublicKey_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublicKeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).PublicKey(m, &userPublicKeyServer{stream})
}

type User_PublicKeyServer interface {
	Send(*PublicKeyValue) error
	grpc.ServerStream
}

type userPublicKeyServer struct {
	grpc.ServerStream
}

func (x *userPublicKeyServer) Send(m *PublicKeyValue) error {
	return x.ServerStream.SendMsg(m)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPublicKey",
			Handler:    _User_AddPublicKey_Handler,
		},
		{
			MethodName: "DelPublicKey",
			Handler:    _User_DelPublicKey_Handler,
		},
		{
			MethodName: "DelToken",
			Handler:    _User_DelToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tokens",
			Handler:       _User_Tokens_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublicKey",
			Handler:       _User_PublicKey_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
