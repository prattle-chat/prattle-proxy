// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: self.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SelfClient is the client API for Self service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelfClient interface {
	// AddPublicKey adds a new public key for a user. A user can have up to n public
	// keys, where n is configured on the proxy.
	//
	// Where n is too few, a user is limited by the number of clients they can connect
	// with.
	// Where n is too high, the cost of sending a user a message becomes high, as does
	// receiving _for_ that user
	AddPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DelPublicKey removes a Public Key from the calling user
	DelPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Tokens returns a user's current tokens for audit/ removal
	Tokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Self_TokensClient, error)
	// DelToken invalidates a token for a user
	DelToken(ctx context.Context, in *TokenValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type selfClient struct {
	cc grpc.ClientConnInterface
}

func NewSelfClient(cc grpc.ClientConnInterface) SelfClient {
	return &selfClient{cc}
}

func (c *selfClient) AddPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/self.Self/AddPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selfClient) DelPublicKey(ctx context.Context, in *PublicKeyValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/self.Self/DelPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selfClient) Tokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Self_TokensClient, error) {
	stream, err := c.cc.NewStream(ctx, &Self_ServiceDesc.Streams[0], "/self.Self/Tokens", opts...)
	if err != nil {
		return nil, err
	}
	x := &selfTokensClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Self_TokensClient interface {
	Recv() (*TokenValue, error)
	grpc.ClientStream
}

type selfTokensClient struct {
	grpc.ClientStream
}

func (x *selfTokensClient) Recv() (*TokenValue, error) {
	m := new(TokenValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *selfClient) DelToken(ctx context.Context, in *TokenValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/self.Self/DelToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelfServer is the server API for Self service.
// All implementations must embed UnimplementedSelfServer
// for forward compatibility
type SelfServer interface {
	// AddPublicKey adds a new public key for a user. A user can have up to n public
	// keys, where n is configured on the proxy.
	//
	// Where n is too few, a user is limited by the number of clients they can connect
	// with.
	// Where n is too high, the cost of sending a user a message becomes high, as does
	// receiving _for_ that user
	AddPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error)
	// DelPublicKey removes a Public Key from the calling user
	DelPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error)
	// Tokens returns a user's current tokens for audit/ removal
	Tokens(*emptypb.Empty, Self_TokensServer) error
	// DelToken invalidates a token for a user
	DelToken(context.Context, *TokenValue) (*emptypb.Empty, error)
	mustEmbedUnimplementedSelfServer()
}

// UnimplementedSelfServer must be embedded to have forward compatible implementations.
type UnimplementedSelfServer struct {
}

func (UnimplementedSelfServer) AddPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublicKey not implemented")
}
func (UnimplementedSelfServer) DelPublicKey(context.Context, *PublicKeyValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPublicKey not implemented")
}
func (UnimplementedSelfServer) Tokens(*emptypb.Empty, Self_TokensServer) error {
	return status.Errorf(codes.Unimplemented, "method Tokens not implemented")
}
func (UnimplementedSelfServer) DelToken(context.Context, *TokenValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelToken not implemented")
}
func (UnimplementedSelfServer) mustEmbedUnimplementedSelfServer() {}

// UnsafeSelfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelfServer will
// result in compilation errors.
type UnsafeSelfServer interface {
	mustEmbedUnimplementedSelfServer()
}

func RegisterSelfServer(s grpc.ServiceRegistrar, srv SelfServer) {
	s.RegisterService(&Self_ServiceDesc, srv)
}

func _Self_AddPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelfServer).AddPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/self.Self/AddPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelfServer).AddPublicKey(ctx, req.(*PublicKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Self_DelPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelfServer).DelPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/self.Self/DelPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelfServer).DelPublicKey(ctx, req.(*PublicKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Self_Tokens_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SelfServer).Tokens(m, &selfTokensServer{stream})
}

type Self_TokensServer interface {
	Send(*TokenValue) error
	grpc.ServerStream
}

type selfTokensServer struct {
	grpc.ServerStream
}

func (x *selfTokensServer) Send(m *TokenValue) error {
	return x.ServerStream.SendMsg(m)
}

func _Self_DelToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelfServer).DelToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/self.Self/DelToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelfServer).DelToken(ctx, req.(*TokenValue))
	}
	return interceptor(ctx, in, info, handler)
}

// Self_ServiceDesc is the grpc.ServiceDesc for Self service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Self_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "self.Self",
	HandlerType: (*SelfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPublicKey",
			Handler:    _Self_AddPublicKey_Handler,
		},
		{
			MethodName: "DelPublicKey",
			Handler:    _Self_DelPublicKey_Handler,
		},
		{
			MethodName: "DelToken",
			Handler:    _Self_DelToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tokens",
			Handler:       _Self_Tokens_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "self.proto",
}
