syntax = "proto3";

import "google/protobuf/empty.proto";

option go_package = "github.com/prattle-chat/prattle-proxy/server";

package group;

// Group calls govern access to groups in prattle.
//
// Groups are essentially lists of users.
// A group can be open or not; an open group allows anybody to join,
// whereas a closed group requires explicit invitation
//
// A group can also be a broadcast group, which means only owners can
// send messages
service Groups {
  // CreateGroup will create a group, setting the calling user as owner.
  //
  // This call is not federated; a user can only create a group on the
  // server their account is hosted on
  rpc Create(Group) returns (Group) {}

  // Join accepts a group_id (and, when from a federared peer, a joiner)
  // and tries to add a user to the members list of that group
  rpc Join(JoinRequest) returns (google.protobuf.Empty) {}

  // Group returns information about a group, such as owners and members
  rpc Info(InfoRequest) returns (Group) {}

  // InviteToGroup allows group owners to invite users to a group
  rpc Invite(InviteRequest) returns (google.protobuf.Empty) {}

  // PromoteUser allows a group owner to make another user an owner
  rpc PromoteUser(PromoteRequest) returns (google.protobuf.Empty) {}

  // DemoteUser allows a group owner to demote another owner to
  // regular user, or to boot a regular user from the group
  rpc DemoteUser(DemoteRequest) returns (google.protobuf.Empty) {}

  // LeaveGroup allows a user to leave a group
  rpc Leave(LeaveRequest) returns (google.protobuf.Empty) {}
}

// Group is used for creating and reading groups; with the following caveats:
//
//    1. The ID field is ignored when creating a new group; group IDs are
//       minted serverside (in much the same way user IDs are)
message Group {
  string id = 1;
  repeated string owners = 2;
  repeated string members = 3;
  bool is_open = 4;
  bool is_broadcast = 5;
}

// JoinRequest is used to join a group. Clients need only set
// the value of group_id. When a prattle server relays a JoinRequest
// to a peer, the relaying server must set the value of joiner to
// the ID of the originator of the call
message JoinRequest {
  string group_id = 1;
  string joiner = 2;
}

// InfoRequest is used to retrieve a group. Clients need only set
// the value of group_id. When a prattle server relays an InfoRequest
// to a peer, the relaying server must set the value of requester to
// the ID of the originator of the call
message InfoRequest {
  string group_id = 1;
}

// LeaveRequest is used to leave a group. Clients need only set
// the value of group_id. When a prattle server relays an LeaveRequest
// to a peer, the relaying server must set the value of leaver to
// the ID of the originator of the call
message LeaveRequest {
  string group_id = 1;
  string leaver = 2;
}

// InviteRequest is used to invite a user (the invitee) to a group.
message InviteRequest {
  string group_id = 1;
  string invitee = 2;
}

// PromoteRequest is used to promote a user (the promotee) within a group,
// from a normal member to a owner
//
// The value of `promoter` is ignored when an invitation request comes
// from a non-peered connection. It is the responsibility of the server
// which recieves that first, non-peered/ relayed, request to set the
// promoter field to the originator of the call
message PromoteRequest {
  string group_id = 1;
  string promotee = 2;
}

// DemoteRequest is used to demote a user (the demotee) to a group,
// from owner -> normal user, and normal user -> booted
//
// The value of `demoter` is ignored when an invitation request comes
// from a non-peered connection. It is the responsibility of the server
// which recieves that first, non-peered/ relayed, request to set the
// demoter field to the originator of the call
message DemoteRequest {
  string group_id = 1;
  string demotee = 2;
}
