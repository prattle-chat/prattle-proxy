syntax = "proto3";

import "google/protobuf/empty.proto";

option go_package = "github.com/prattle-chat/prattle-proxy/server";

package group;

// Group calls govern access to groups in prattle.
//
// Groups are essentially lists of users.
// A group can be open or not; an open group allows anybody to join,
// whereas a closed group requires explicit invitation
//
// A group can also be a broadcast group, which means only owners can
// send messages
service Groups {
    // CreateGroup will create a group, setting the calling user as owner
  rpc Create(Group) returns (Group) {}

  // Join will
  rpc Join(GroupUser) returns (google.protobuf.Empty) {}

  // Group returns information about a group, such as owners and members
  rpc Info(GroupUser) returns (Group) {}

  // InviteToGroup allows group owners to invite users to a group
  rpc Invite(GroupUser) returns (google.protobuf.Empty) {}

  // PromoteUser allows a group owner to make another user an owner
  rpc PromoteUser(GroupUser) returns (google.protobuf.Empty) {}

  // DemoteUser allows a group owner to demote another owner to
  // regular user, or to boot a regular user from the group
  rpc DemoteUser(GroupUser) returns (google.protobuf.Empty) {}

  // LeaveGroup allows a user to leave a group
  rpc Leave(GroupUser) returns (google.protobuf.Empty) {}
}

// Group is used for most group operations, such as:
//
//   1. Creating a group (note: ID is ignored; IDs are generated)
//   2. Viewing group info
message Group {
  string id = 1;
  repeated string owners = 2;
  repeated string members = 3;
  bool is_open = 4;
  bool is_broadcast = 5;
}

// GroupUser is used on operations where a group ID and a user ID
// is needed, such as invitations, booting users, etc.
//
// When a GroupUser message passes between peers, the field 'For' should
// be set to the caller, as determined by the origin server; this is to
// ensure that federated peers can determine whether an operation is
// permitted.
//
// This does, of course, put a certain level of trust in the sanctity of
// the peering connection.
message GroupUser {
  string group_id = 1;
  string user_id = 2 ;
  string for = 3;
}
