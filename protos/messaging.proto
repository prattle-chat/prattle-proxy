syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/prattle-chat/prattle-proxy/server";

package messaging;

// Messaging provides a set of endpoints based around sending messages
// between client.
//
// These endpoints are also called by federated services in order to
// send messages between prattle installations, too
service Messaging {
  // Send accepts an encoded/ wrapped message and sends it to a user
  rpc Send(MessageWrapper) returns (google.protobuf.Empty) {}

  // Subscribe is used to provide a stream to receive a user's messages
  // User's must only call Subscribe on the prattle instance which owns/
  // hosts their account.
  //
  // Server implementations must return an error if a user tries to subscribe
  // to an account which is not on the domain it owns
  rpc Subscribe(google.protobuf.Empty) returns (stream messaging.MessageWrapper) {}
}

// MessageWrappper wraps an encoded/ encrypted message to be forwarded to a recipient
//
// Encoded is expected to be formed by taking a 'Message' and encypting it with the
// recipient's public key. Because of this, that message is where all of the important
// and useful metadatas are stored, such as sender.
//
// While the existence of the Sender field makes it easy to log and track who is sending
// messages where, it does allow us to check permissions more easily, and it does allow
// us to ensure senders are not spoofed in payloads.
//
// That being said, a user sending a message to another user on the same domain may omit
// the Sender field; in this instance, the sender can be derived from the authentication
// data associated with a user's token
//
// When sending a message to a user in a group, the field 'for' should be set the the
// group name. It is the client's responsibility to match this field with the recipient
// field in a decoded, decrypted 'Message' to ensure it matches the 'for' field when
// the value of Message.Recipient is a group
message MessageWrapper {
  Subject recipient = 1;
  Subject sender = 2;
  bytes encoded = 3;
}

// Message holds a minimum amount of metadata for a message, plus arbitrary body.
//
// This message is expected to be marshalled to text,
// encrypted with the recipient's public key(s) and then added to a MessageWrapper
// before being sent to a user
message Message {
  google.protobuf.Timestamp datetime = 1;
  bytes body = 2;
  string mimetype = 3;
}

// Subject holds the necessary data for a prattle instance to determine not only the
// recipient of a message, but whether or not a sender can send a message to this recipient.
//
// Additionally, it forms the subject of a public key lookup.
//
// Specifically, in the case of sending to a group, it contains both the UserId of the
// recipient, and the GroupId that this message is being sent on behalf of. See
// messaging.Send for more information on why this is.
//
// Direct messages may ignore the field group_id - prattle implementations should ignore
// this value (rather than error if set).
message Subject {
  string id = 1;
  string group_id = 2;
}
